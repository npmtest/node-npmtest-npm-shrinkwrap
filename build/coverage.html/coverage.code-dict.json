{"/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/test.js":"/* istanbul instrument in package npmtest_npm_shrinkwrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/lib.npmtest_npm_shrinkwrap.js":"/* istanbul instrument in package npmtest_npm_shrinkwrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_shrinkwrap = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_shrinkwrap = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-shrinkwrap && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_shrinkwrap */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_shrinkwrap\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_shrinkwrap.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_shrinkwrap.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_shrinkwrap.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_shrinkwrap.__dirname + '/lib.npmtest_npm_shrinkwrap.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/index.js":"var ValidationError = require('error/validation');\nvar find = require('array-find');\nvar path = require('path');\nvar fs = require('graceful-fs');\nvar sortedObject = require('sorted-object');\nvar readJSON = require('./read-json');\n\nvar setResolved = require('./set-resolved.js');\nvar trimFrom = require('./trim-and-sort-shrinkwrap.js');\nvar verifyGit = require('./verify-git.js');\nvar walkDeps = require('./walk-shrinkwrap.js');\nvar trimNested = require('./trim-nested.js');\nvar sync = require('./sync/');\nvar ERRORS = require('./errors.js');\n\n/*  npm-shrinkwrap algorithm\n\n     - run `npm ls` to verify that node_modules & package.json\n        agree.\n\n     - run `verifyGit()` which has a similar algorithm to \n        `npm ls` and will verify that node_modules & package.json\n        agree for all git links.\n\n     - read the old `npm-shrinkwrap.json` into memory\n\n     - run `npm shrinkwrap`\n\n     - copy over excess non-standard keys from old shrinkwrap\n        into new shrinkwrap and write new shrinkwrap with extra\n        keys to disk.\n\n     - run `setResolved()` which will ensure that the new\n        npm-shrinkwrap.json has a `\"resolved\"` field for every\n        package and writes it to disk.\n\n     - run `trimFrom()` which normalizes or removes the `\"from\"`\n        field from the new npm-shrinkwrap.json. It also sorts\n        the new npm-shrinkwrap.json deterministically then\n        writes that to disk\n\n     - run `trimNested()` which will trim any changes in the\n        npm-shrinkwrap.json to dependencies at depth >=1. i.e.\n        any changes to nested dependencies without changes to\n        the direct parent dependency just get deleted\n\n     - run `sync()` to the new `npm-shrinkwrap.json` back into\n        the `node_modules` folder\n\n\n    npm-shrinkwrap NOTES:\n\n     - `verifyGit()` only has a depth of 0, where as `npm ls`\n        has depth infinity.\n\n     - `verifyGit()` is only sound for git tags. This means that\n        for non git tags it gives warnings / errors instead.\n\n     - `trimFrom()` also sorts and rewrites the package.json\n        for consistency\n\n*/\n\nfunction npmShrinkwrap(opts, callback) {\n    if (typeof opts === 'string') {\n        opts = { dirname: opts };\n    }\n\n    var _warnings = null;\n    var _oldShrinkwrap = null;\n\n    getNPM().load({\n        prefix: opts.dirname,\n        dev: opts.dev,\n        loglevel: 'error'\n    }, verifyTree);\n\n    function verifyTree(err, npm) {\n        if (err) {\n            return callback(err);\n        }\n\n        // when running under `npm test` depth is set to 1\n        // reset it to a high number like 100\n        npm.config.set('depth', 100);\n\n        npm.commands.ls([], true, onls);\n\n        function onls(err, _, pkginfo) {\n            if (err) {\n                return callback(err);\n            }\n\n            if (pkginfo.problems) {\n                var error = NPMError(pkginfo);\n                return callback(error);\n            }\n\n            verifyGit(opts, onverify);\n        }\n\n        function onverify(err, errors) {\n            if (err) {\n                return callback(err);\n            }\n\n            if (errors.length === 0) {\n                return onnpm(null, npm);\n            }\n\n            var error = ValidationError(errors);\n            var invalid = find(errors, function (error) {\n                return error.type === 'invalid.git.version';\n            });\n\n            if (invalid) {\n                error = ERRORS.InvalidVersionsNPMError({\n                    actual: invalid.actual,\n                    name: invalid.name,\n                    dirname: invalid.dirname,\n                    errors: error.errors\n                });\n            }\n\n            var types = errors.reduce(function (acc, e) {\n                if (acc.indexOf(e.type) === -1) {\n                    acc.push(e.type);\n                }\n\n                return acc;\n            }, []);\n\n            if (opts.warnOnNotSemver && types.length === 1 &&\n                types[0] === 'gitlink.tag.notsemver'\n            ) {\n                _warnings = error.errors;\n                return onnpm(null, npm);\n            }\n\n            callback(error);\n        }\n    }\n\n    function onnpm(err, npm) {\n        if (err) {\n            return callback(err);\n        }\n\n        var fileName = path.join(opts.dirname, 'npm-shrinkwrap.json');\n        readJSON(fileName, onfile);\n\n        function onfile(err, oldShrinkwrap) {\n            if (err) {\n                // if no npm-shrinkwrap.json exists then just\n                // create one\n                npm.commands.shrinkwrap({}, true, onshrinkwrap);\n                return;\n            }\n\n            _oldShrinkwrap = oldShrinkwrap;\n\n            /* npm.commands.shrinkwrap will blow away any\n                extra keys that you set.\n\n                We have to read extra keys & set them again\n                after shrinkwrap is done\n            */\n            var keys = Object.keys(oldShrinkwrap)\n                .filter(function (k) {\n                    return [\n                        'name', 'version', 'dependencies'\n                    ].indexOf(k) === -1;\n                });\n\n            npm.commands.shrinkwrap({}, true, onwrapped);\n\n            function onwrapped(err) {\n                if (err) {\n                    return callback(err);\n                }\n\n                readJSON(fileName, onnewfile);\n            }\n\n            function onnewfile(err, newShrinkwrap) {\n                if (err) {\n                    return callback(err);\n                }\n\n                keys.forEach(function (k) {\n                    if (!newShrinkwrap[k]) {\n                        newShrinkwrap[k] = oldShrinkwrap[k];\n                    }\n                });\n\n                newShrinkwrap = sortedObject(newShrinkwrap);\n\n                var buf = JSON.stringify(newShrinkwrap, null, 2) + '\\n';\n                fs.writeFile(fileName, buf, 'utf8', onshrinkwrap);\n            }\n        }\n    }\n\n    function onshrinkwrap(err) {\n        if (err) {\n            return callback(err);\n        }\n\n        setResolved(opts, onResolved);\n    }\n\n    function onResolved(err) {\n        if (err) {\n            return callback(err);\n        }\n\n        trimFrom(opts, ontrim);\n    }\n\n    function ontrim(err) {\n        if (err) {\n            return callback(err);\n        }\n\n        var fileName = path.join(opts.dirname,\n            'npm-shrinkwrap.json');\n        readJSON(fileName, function (err, newShrinkwrap) {\n            if (err) {\n                return callback(err);\n            }\n\n            if (_oldShrinkwrap) {\n                newShrinkwrap = trimNested(_oldShrinkwrap,\n                    newShrinkwrap, opts);\n            }\n\n            var buf = JSON.stringify(newShrinkwrap, null, 2) + '\\n';\n            fs.writeFile(fileName, buf, 'utf8', function (err) {\n                if (err) {\n                    return callback(err);\n                }\n\n                readJSON(fileName, onfinalwrap);\n            });\n        });\n    }\n\n    function onfinalwrap(err, shrinkwrap) {\n        if (err) {\n            return callback(err);\n        }\n\n        sync(opts, function (err) {\n            if (err) {\n                return callback(err);\n            }\n\n            onsync(null, shrinkwrap);\n        });\n    }\n\n    function onsync(err, shrinkwrap) {\n        if (err) {\n            return callback(err);\n        }\n\n        var warnings = _warnings ? _warnings : [];\n        var errors = [];\n\n        if (opts.validators && Array.isArray(opts.validators) &&\n            opts.validators.length !== 0\n        ) {\n            walkDeps(shrinkwrap, function (node, key, parent) {\n                var errs = opts.validators.map(function (f) {\n                    return f(node, key, parent);\n                }).filter(Boolean);\n\n                if (errs.length) {\n                    errors = errors.concat(errs);\n                }\n            });\n        }\n\n        if (errors.length) {\n            return callback(ValidationError(errors), warnings);\n        }\n\n        callback(null, warnings);\n    }\n}\n \nmodule.exports = npmShrinkwrap;\n\n/*  you cannot call `npm.load()` twice with different prefixes.\n    \n    The only fix is to clear the entire node require cache and\n      get a fresh duplicate copy of the entire npm library\n*/\nfunction getNPM() {\n    Object.keys(require.cache).forEach(function (key) {\n        delete require.cache[key];\n    });\n    var NPM = require('npm');\n    return NPM;\n}\n\nfunction NPMError(pkginfo) {\n    var problemsText = pkginfo.problems.join('\\n');\n\n    return ERRORS.NPMError({\n        pkginfo: pkginfo,\n        problemsText: problemsText\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/read-json.js":"// From https://github.com/azer/read-json\n// Licensed under the BSD license\n// Adapted to use graceful-fs\n\nvar fs = require(\"graceful-fs\");\n\nmodule.exports = readJSON;\n\nfunction readJSON(filename, options, callback){\n  if(callback === undefined){\n    callback = options;\n    options = {};\n  }\n\n  fs.readFile(filename, options, function(error, bf){\n    if(error) return callback(error);\n\n    try {\n      bf = JSON.parse(bf.toString().replace(/^\\ufeff/g, ''));\n    } catch (err) {\n      callback(err);\n      return;\n    }\n\n    callback(undefined, bf);\n  });\n}","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/set-resolved.js":"var path = require('path');\nvar fs = require('graceful-fs');\nvar template = require('string-template');\nvar readJSON = require('./read-json');\nvar url = require('url');\nvar semver = require('semver');\n\nvar errors = require('./errors.js');\nvar version = require('./package.json').version;\n\nvar NPM_URI = 'https://registry.npmjs.org/{name}/-/{name}-{version}.tgz';\n\nmodule.exports = setResolved;\n\nfunction defaultCreateUri(name, version) {\n    return template(NPM_URI, {\n        name: name,\n        version: version\n    });\n}\n\n/*  from field is either:\n     - {name}@{semverRange}\n     - {name}@{gitUri}\n     - {privateRegistryUri}\n\n*/\nfunction setResolved(opts, callback) {\n    if (typeof opts === 'string') {\n        opts = { dirname: opts };\n    }\n\n    var shrinkwrapFile = path.join(opts.dirname, 'npm-shrinkwrap.json');\n    var createUri = opts.createUri || defaultCreateUri;\n    var registries = opts.registries || ['registry.npmjs.org'];\n    var rewriteResolved = opts.rewriteResolved || null;\n\n    readJSON(shrinkwrapFile, onjson);\n\n    function onjson(err, json) {\n        if (err) {\n            return callback(err);\n        }\n\n        var existingVersion = json['npm-shrinkwrap-version'];\n\n        if (existingVersion && semver.gt(existingVersion, version)) {\n            return callback(errors.InvalidNPMVersion({\n                existing: existingVersion,\n                current: version\n            }));\n        }\n\n        json['npm-shrinkwrap-version'] = version;\n\n        json['node-version'] = process.version;\n\n        json = fixResolved(json, null);\n\n        // if top level shrinkwrap has a `from` or `resolved`\n        // field then delete them\n        if (json.from) {\n            json.from = undefined;\n        }\n        if (json.resolved) {\n            json.resolved = undefined;\n        }\n\n        fs.writeFile(shrinkwrapFile,\n            JSON.stringify(json, null, 2) + '\\n', callback);\n    }\n\n    function fixResolved(json, name) {\n        if (json.from && !json.resolved) {\n            computeResolved(json, name);\n        }\n\n        // handle the case of no resolved & no from\n        if (json.version && name && !json.resolved) {\n            json.resolved = createUri(name, json.version);\n        }\n\n        if (rewriteResolved && json.resolved) {\n            json.resolved = rewriteResolved(json.resolved);\n        }\n\n        if (json.dependencies) {\n            Object.keys(json.dependencies).forEach(function (dep) {\n                fixResolved(json.dependencies[dep], dep);\n            });\n            json.dependencies = json.dependencies;\n        }\n\n        return json;\n    }\n\n    /*  look for `from` fields and set a `resolved` field next\n          to it if the `resolved` does not exist.\n\n        This normalizes `npm shrinkwrap` so a resolved field\n          always get's set.\n\n    */\n    function computeResolved(json, name) {\n        var value = json.from;\n        name = name || json.name;\n\n        var uri = url.parse(value);\n\n        // handle the case `from` is a privateRegistryURL\n        if ((uri.protocol === 'http:' || uri.protocol === 'https:') &&\n            registries.indexOf(uri.host) !== -1\n        ) {\n            json.resolved = value;\n            return;\n        }\n\n        // from is {name}@{semver | uri}\n        var parts = value.split('@');\n        var rest = parts.slice(1).join('@');\n\n        var secondUri = url.parse(rest);\n\n        // from is a {name}@{semver}\n        if (!secondUri.protocol) {\n            // call createUri to generate a tarball uri\n            // for json module name & version\n            json.resolved = createUri(name, json.version);\n            return;\n        } else {\n            // from is a git link.\n            // do not try to set resolved\n            return;\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/errors.js":"var TypedError = require('error/typed');\n\nvar EmptyFile = TypedError({\n    message: 'npm-shrinkwrap must not be empty',\n    type: 'npm-shrinkwrap.missing'\n});\n\nvar InvalidNPMVersion = TypedError({\n    type: 'npm-shrinkwrap.invalid_version',\n    message: 'Using an older version of npm-shrinkwrap.\\n' +\n        'Expected version {existing} but found {current}.\\n' +\n        'To fix: please run `npm install npm-shrinkwrap@{existing}`\\n'\n});\n\nvar NPMError = TypedError({\n    type: 'npm-shrinkwrap.npm-error',\n    message: 'Problems were encountered\\n' +\n        'Please correct and try again.\\n' +\n        '{problemsText}',\n    pkginfo: null,\n    problemsText: null\n});\n\nvar InvalidVersionsNPMError = TypedError({\n    type: 'npm-shrinkwrap.npm-error.invalid-version',\n    message: 'Problems were encountered\\n' +\n        'Please correct and try again\\n' +\n        'invalid: {name}@{actual} {dirname}/node_modules/{name}',\n    errors: null,\n    name: null,\n    actual: null,\n    dirname: null\n});\n\nvar NoTagError = TypedError({\n    type: 'missing.gitlink.tag',\n    message: 'Expected the git dependency {name} to have a ' +\n        'tag;\\n instead I found {gitLink}'\n});\n\nvar NonSemverTag = TypedError({\n    type: 'gitlink.tag.notsemver',\n    message: 'Expected the git dependency {name} to have a ' +\n        'valid version tag;\\n instead I found {tag} for the ' +\n        'dependency {gitLink}'\n});\n\nvar InvalidPackage = TypedError({\n    type: 'invalid.packagejson',\n    message: 'The package.json for module {name} in your ' +\n        'node_modules tree is malformed.\\n Expected JSON with ' +\n        'a version field and instead got {json}'\n});\n\nvar InvalidVersion = TypedError({\n    type: 'invalid.git.version',\n    message: 'The version of {name} installed is invalid.\\n ' +\n        'Expected {expected} to be installed but instead ' +\n        '{actual} is installed.'\n});\n\nvar MissingPackage = TypedError({\n    type: 'missing.package',\n    message: 'The version of {name} installed is missing.\\n' +\n        'Expected {expected} to be installed but instead ' +\n            'found nothing installed.\\n'\n});\n\nmodule.exports = {\n    EmptyFile: EmptyFile,\n    InvalidNPMVersion: InvalidNPMVersion,\n    NPMError: NPMError,\n    InvalidVersionsNPMError: InvalidVersionsNPMError,\n    NoTagError: NoTagError,\n    NonSemverTag: NonSemverTag,\n    InvalidPackage: InvalidPackage,\n    InvalidVersion: InvalidVersion,\n    MissingPackage: MissingPackage\n};\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/trim-and-sort-shrinkwrap.js":"var fs = require('graceful-fs');\nvar path = require('path');\nvar url = require('url');\nvar safeJsonParse = require('safe-json-parse');\nvar parallel = require('run-parallel');\nvar sortedObject = require('sorted-object');\nvar readJSON = require('./read-json');\n\nvar errors = require('./errors.js');\n\nmodule.exports = trimFrom;\n\n// set keys in an order\nfunction sortedKeys(obj, orderedKeys) {\n    var keys = Object.keys(obj).sort();\n    var fresh = {};\n\n    orderedKeys.forEach(function (key) {\n        if (keys.indexOf(key) === -1) {\n            return;\n        }\n\n        fresh[key] = obj[key];\n    });\n\n    keys.forEach(function (key) {\n        if (orderedKeys.indexOf(key) !== -1) {\n            return;\n        }\n\n        fresh[key] = obj[key];\n    });\n\n    return fresh;\n}\n\nfunction recursiveSorted(json) {\n    if (!json) {\n        return json;\n    }\n\n    var deps = json.dependencies;\n    if (typeof deps === 'object' && deps !== null) {\n        json.dependencies = Object.keys(deps)\n            .reduce(function (acc, key) {\n                acc[key] = recursiveSorted(deps[key]);\n                return acc;\n            }, {});\n        json.dependencies = sortedObject(json.dependencies);\n    }\n\n    return sortedKeys(json, [\n        'name',\n        'version',\n        'from',\n        'resolved',\n        'npm-shrinkwrap-version',\n        'node-version',\n        'dependencies'\n    ]);\n\n}\n\nfunction trimFrom(opts, callback) {\n    if (typeof opts === 'string') {\n        opts = { dirname: opts };\n    }\n\n    var shrinkwrapFile = path.join(opts.dirname, 'npm-shrinkwrap.json');\n    var registries = opts.registries || ['registry.npmjs.org'];\n\n    parallel([\n        fixShrinkwrap,\n        fixPackage.bind(null, opts.dirname)\n    ], callback);\n\n\n    function fixShrinkwrap(callback) {\n        fs.readFile(shrinkwrapFile, 'utf8', function (err, file) {\n            if (err) {\n                return callback(err);\n            }\n\n            if (file === '') {\n                return callback(errors.EmptyFile());\n            }\n\n            safeJsonParse(file, function (err, json) {\n                if (err) {\n                    return callback(err);\n                }\n\n                json = recursiveSorted(json);\n\n                json = replaceFields(json, replacer);\n\n                fs.writeFile(shrinkwrapFile,\n                    JSON.stringify(json, null, 2) + '\\n', callback);\n            });\n        });\n    }\n\n    function replaceFields(json, replacer, name) {\n        name = name || 'root';\n\n        if (json.from) {\n            json.from = replacer.call(json,\n                'from', json.from, name);\n        }\n\n        if (json.dependencies) {\n            Object.keys(json.dependencies)\n                .forEach(recurse);\n        }\n\n        return json;\n\n        function recurse(name) {\n            json.dependencies[name] = replaceFields(\n                json.dependencies[name],\n                replacer,\n                name);\n        }\n    }\n\n    function fixFromField(opts) {\n        var shaIsm = opts.fromUri.hash &&\n            opts.fromUri.hash.slice(1);\n\n        // from does not have shaIsm. bail early\n        if (!shaIsm) {\n            return opts.name + '@' + opts.fromValue;\n        }\n\n        var resolvedUri = url.parse(opts.resolvedValue);\n        var resolveShaism = resolvedUri.hash &&\n            resolvedUri.hash.slice(1);\n\n        // resolved does not have shaIsm. bail early\n        if (!resolveShaism) {\n            return opts.name + '@' + opts.fromValue;\n        }\n\n        // replace the from shaIsm with the resolved shaIsm\n        if (shaIsm !== resolveShaism) {\n            var pathname = opts.fromUri.pathname;\n            // normalize git+ssh links with a ':' after the host instead of a '/'\n            if (pathname[1] === ':') {\n                pathname = pathname[0] + pathname.slice(2);\n            }\n            var newValue = url.format({\n                protocol: opts.fromUri.protocol,\n                slashes: opts.fromUri.slashes,\n                auth: opts.fromUri.auth,\n                host: opts.fromUri.host,\n                pathname: pathname,\n                hash: resolveShaism\n            });\n            return opts.name + '@' + newValue;\n        }\n\n        return opts.name + '@' + opts.fromValue;\n    }\n\n    /* trims the `from` field from `npm-shrinkwrap.json` files.\n\n        The `from` field is likely to change because different npm\n            clients do different things and general non determinism.\n\n        The `from` field is not really important since the `resolved`\n            and `version` fields are mostly used.\n\n        The only situations in which `from` is used is non npm links\n            (i.e. git, git+ssh and https tarbal links) and situations\n            where there is no `resolved` field.\n    */\n    function replacer(key, value, name) {\n        if (key !== 'from') {\n            return value;\n        }\n\n        var resolved = this.resolved;\n\n        // if this dependency has no `resolved` field then it's not\n        // safe to remove the `from` field since `npm install` will\n        // use it.\n        if (!resolved) {\n            return value;\n        }\n\n        var uri = url.parse(value);\n\n        // if it's a `http:` link to registry its safe\n        // to remove as `from` is not really used\n        if ((uri.protocol === 'http:' || uri.protocol === 'https:') &&\n            registries.indexOf(uri.host) !== -1\n        ) {\n            return undefined;\n        // if it's any other link, like `git`, `git+ssh` or a http\n        // link to an arbitrary tarball then we cant remove it\n        } else if (uri.protocol) {\n            // for resolve branches & shaisms to commit shas\n            // we should always have `from` contain a git sha\n            // because that's consistent\n\n            return fixFromField({\n                fromUri: uri,\n                name: name,\n                fromValue: value,\n                resolvedValue: resolved\n            });\n        }\n\n        // otherwise the `value` is in the format `name@semverish`\n\n        var parts = value.split('@');\n        var rest = parts.slice(1).join('@');\n\n        // parse the `semverish` part of the `from` field value.\n        var secondUri = url.parse(rest);\n\n        // if it's an uri instead of a `semverish` then it's not\n        // safe to remove the `from` field\n        // However if it is NOT an uri then its safe to remove\n        if (!secondUri.protocol) {\n            return undefined;\n        }\n\n        return fixFromField({\n            fromUri: secondUri,\n            fromValue: rest,\n            name: name,\n            resolvedValue: resolved\n        });\n    }\n}\n\nfunction fixPackage(dirname, callback) {\n    var packageJsonFile = path.join(dirname, 'package.json');\n    readJSON(packageJsonFile, function (err, json) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (json.dependencies) {\n            json.dependencies = sortedObject(json.dependencies);\n        }\n        if (json.devDependencies) {\n            json.devDependencies = sortedObject(json.devDependencies);\n        }\n\n        var data = JSON.stringify(json, null, 2) + '\\n';\n        fs.writeFile(packageJsonFile, data, callback);\n    });\n}\n\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/verify-git.js":"var path = require('path');\nvar readJSON = require('./read-json');\nvar parallel = require('run-parallel');\n\nvar analyzeDependency = require('./analyze-dependency.js');\n\nmodule.exports = verifyGit;\n\nfunction verifyGit(opts, callback) {\n    if (typeof opts === 'string') {\n        opts = { dirname: opts };\n    }\n\n    var packageFile = path.join(opts.dirname, 'package.json');\n\n    readJSON(packageFile, onpackage);\n\n    function onpackage(err, package) {\n        if (err) {\n            return callback(err);\n        }\n\n        var deps = package.dependencies || {};\n        var devDeps = package.devDependencies || {};\n\n        parallel([\n            analyze.bind(null, deps, opts),\n            opts.dev ? analyze.bind(null, devDeps, opts) : null\n        ].filter(Boolean), function (err, values) {\n            if (err) {\n                return callback(err);\n            }\n\n            var errors = values[0].concat(values[1] || []);\n\n            callback(null, errors);\n        });\n    }\n}\n\nfunction analyze(deps, opts, callback) {\n    var tasks = Object.keys(deps).map(function (key) {\n        return analyzeDependency.bind(null,\n            key, deps[key], opts);\n    });\n\n    parallel(tasks, function (err, results){\n        if (err) {\n            return callback(err);\n        }\n\n        var errors = Object.keys(results)\n            .reduce(function (acc, key) {\n                if (results[key]) {\n                    acc.push(results[key]);\n                }\n                return acc;\n            }, []);\n\n        callback(null, errors);\n    });\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/analyze-dependency.js":"var url = require('url');\nvar validSemver = require('semver').valid;\nvar path = require('path');\nvar readJSON = require('./read-json');\n\nvar errors = require('./errors.js');\n\nmodule.exports = analyzeDependency;\n/*\n\n    for each dependency in package.json\n\n        - if not git then skip\n        - if no # tag then throw\n        - if # is not `v{version}` then throw\n        - load up `require(name/package.json).version`\n        - if version in node_modules not same in SHA then throw\n\n    Support\n\n        - git://github.com/user/project.git#commit-is  h\n        - git+ssh://user@hostname:project.git#commit-ish\n        - git+ssh://user@hostname/project.git#commit-ish\n        - git+http://user@hostname/project/blah.git#commit-ish\n        - git+https://user@hostname/project/blah.git#commit-ish\n        - user/name#commit-ish (github)\n*/\n\nfunction analyzeDependency(name, gitLink, opts, cb) {\n    var parsed = parseTag(gitLink);\n\n    if (!parsed) {\n        return cb(null);\n    }\n\n    if (!parsed.tag) {\n        return cb(null, errors.NoTagError({\n            name: name,\n            gitLink: gitLink,\n            dirname: opts.dirname\n        }));\n    }\n\n    var version = parseVersion(parsed.tag);\n\n    if (!version) {\n        return cb(null, errors.NonSemverTag({\n            name: name,\n            gitLink: gitLink,\n            tag: parsed.tag,\n            dirname: opts.dirname\n        }));\n    }\n\n    var packageUri = path.join(opts.dirname, 'node_modules',\n        name, 'package.json');\n    readJSON(packageUri, function (err, pkg) {\n        if (err) {\n            if (err.code === 'ENOENT') {\n                return cb(null, errors.MissingPackage({\n                    name: name,\n                    expected: version,\n                    dirname: opts.dirname,\n                    tag: parsed.tag\n                }));\n            }\n\n            return cb(err);\n        }\n\n        if (!pkg || !pkg.version) {\n            return cb(null, errors.InvalidPackage({\n                name: name,\n                gitLink: gitLink,\n                json: JSON.stringify(pkg),\n                tag: parsed.tag,\n                dirname: opts.dirname\n            }));\n        }\n\n        if (pkg.version !== version) {\n            return cb(null, errors.InvalidVersion({\n                name: name,\n                expected: version,\n                actual: pkg.version,\n                gitLink: gitLink,\n                tag: parsed.tag,\n                dirname: opts.dirname\n            }));\n        }\n\n        return cb(null);\n    });\n}\n\nfunction parseTag(value) {\n    var uri = url.parse(value);\n\n    if (isGitUrl(uri)) {\n        return {\n            tag: uri.hash ? uri.hash.substr(1) : null\n        };\n    }\n\n    // support github\n    var parts = value.split('/');\n    if (parts.length === 2) {\n        var tag = parts[1].split('#')[1];\n\n        return { tag: tag || null };\n    }\n\n    return null;\n}\n\nfunction isGitUrl (url) {\n    switch (url.protocol) {\n        case \"git:\":\n        case \"git+http:\":\n        case \"git+https:\":\n        case \"git+rsync:\":\n        case \"git+ftp:\":\n        case \"git+ssh:\":\n            return true;\n    }\n}\n\nfunction parseVersion(tag) {\n    var char = tag[0];\n\n    if (char !== 'v') {\n        return null;\n    }\n\n    var rest = tag.substr(1);\n    var isValid = validSemver(rest);\n\n    return isValid ? rest : null;\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/walk-shrinkwrap.js":"module.exports = walkDeps;\n\nfunction walkDeps(package, fn, key, parent) {\n    package._name = key || package.name;\n    package._parent = parent || null;\n    fn(package, package._name, package._parent);\n\n    Object.keys(package.dependencies || {})\n        .forEach(function (key) {\n            walkDeps(package.dependencies[key],\n                fn, key, package);\n        });\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/trim-nested.js":"var jsonDiff = require('json-diff');\n\nmodule.exports = trimNested;\n\n/*  var patches = diff(current, previous)\n\n    for each NESTED (depth >=1) patch, apply it to current.\n\n    Write new current into disk at dirname/npm-shrinkwrap.json\n\n*/\nfunction trimNested(previous, current, opts) {\n    // bail early if we want to keep nested dependencies\n    if (opts.keepNested) {\n        return current;\n    }\n\n    // purposes find patches from to\n    // apply TO current FROM previous\n    var patches = jsonDiff.diff(current, previous);\n\n    if (!patches) {\n        return current;\n    }\n\n    patches = removeTopLevelPatches(patches);\n\n    if (patches.dependencies) {\n        Object.keys(patches.dependencies)\n            .forEach(function (key) {\n                current.dependencies[key] =\n                    previous.dependencies[key];\n            });\n    }\n\n    return current;\n}\n\nfunction removeTopLevelPatches(patches) {\n    if (!patches.dependencies) {\n        return patches;\n    }\n\n    patches.dependencies = Object.keys(patches.dependencies)\n        .reduce(function (acc, key) {\n            var patch = patches.dependencies[key];\n\n            if (typeof patch !== 'object' || patch === null) {\n                return acc;\n            }\n\n            var patchKeys = Object.keys(patch);\n\n            if (patchKeys.length === 1 &&\n                patchKeys[0] === 'dependencies'\n            ) {\n                acc[key] = patch;\n            }\n            return acc;\n        }, {});\n\n    return patches;\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/sync/index.js":"var path = require('path');\nvar parallel = require('run-parallel');\nvar npm = require('npm');\n\nvar read = require('./read.js');\nvar forceInstall = require('./force-install.js');\n\n/* sync shrinkwrap\n\n - read npm-shrinkwrap.json\n - walk it and write it into node_modules\n - remove any excess shit from node_modules\n\n*/\n\nmodule.exports = syncShrinkwrap;\n\nfunction syncShrinkwrap(opts, cb) {\n    var dirname = opts.dirname || process.cwd();\n\n    var npmOpts = {\n        prefix: opts.dirname,\n        loglevel: 'error'\n    };\n\n    if (opts.registry) {\n        npmOpts.registry = opts.registry;\n    }\n\n    npm.load(npmOpts, function (err, npm) {\n        if (err) {\n            return cb(err);\n        }\n\n        opts.npm = npm;\n\n        parallel({\n            shrinkwrap: read.shrinkwrap.bind(null, dirname),\n            devDependencies: read.devDependencies.bind(null, dirname)\n        }, function (err, tuple) {\n            if (err) {\n                return cb(err);\n            }\n\n            var nodeModules = path.join(dirname, 'node_modules');\n            var shrinkwrap = tuple.shrinkwrap;\n            shrinkwrap.devDependencies = tuple.devDependencies;\n\n            opts.dev = true;\n\n            forceInstall(nodeModules, shrinkwrap, opts, cb);\n        });\n    });\n}\n\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/sync/read.js":"var path = require('path');\nvar readJSON = require('../read-json');\nvar TypedError = require('error/typed');\n\nvar FileNotFound = TypedError({\n    type: 'file.not.found',\n    message: 'Expected the npm-shrinkwrap.json file to exist exist\\n' +\n        'filePath {filePath}.\\n' +\n        'SUGGESTED FIX: run `npm run shrinkwrap` or `npm-shrinkwrap` to generate one.\\n'\n});\n\nmodule.exports = {\n    shrinkwrap: readShrinkwrap,\n    package: readPackage,\n    devDependencies: readDevDependencies\n};\n\nfunction readPackage(dirname, cb) {\n    var filePath = path.join(dirname, 'package.json');\n    readJSON(filePath, cb);\n}\n\nfunction readShrinkwrap(dirname, cb) {\n    var filePath = path.join(dirname, 'npm-shrinkwrap.json');\n    readJSON(filePath, function(err, json) {\n        if (err && err.code === 'ENOENT') {\n            return cb(FileNotFound({\n                filePath: filePath\n            }));\n        } else {\n            cb(null, json);\n        }\n    });\n}\n\nfunction readDevDependencies(dirname, cb) {\n    readPackage(dirname, function (err, json) {\n        if (err) {\n            return cb(err);\n        }\n\n        cb(null, json.devDependencies);\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/sync/force-install.js":"var path = require('path');\nvar url = require('url');\nvar parallel = require('run-parallel');\nvar series = require('run-series');\nvar template = require('string-template');\n\nvar read = require('./read.js');\nvar purgeExcess = require('./purge-excess.js');\nvar installModule = require('./install-module.js');\n\nvar NPM_URI = 'https://registry.npmjs.org/{name}/-/{name}-{version}.tgz';\n\nmodule.exports = forceInstall;\n\nfunction forceInstall(nodeModules, shrinkwrap, opts, cb) {\n    if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};\n    }\n\n    // if no dependencies object then terminate recursion\n    if (shrinkwrap.name && !shrinkwrap.dependencies) {\n        return purgeExcess(nodeModules, shrinkwrap, opts, cb);\n    }\n\n    var deps = shrinkwrap.dependencies;\n    // console.log('shrinkwrap', shrinkwrap);\n    var tasks = Object.keys(deps).map(function (key) {\n        var dep = deps[key];\n        if (!dep.name) {\n            dep.name = key;\n        }\n        var filePath = path.join(nodeModules, key);\n\n        return isCorrect.bind(null, filePath, dep, opts);\n    });\n\n    tasks.push(purgeExcess.bind(\n        null, nodeModules, shrinkwrap, opts));\n\n    parallel(tasks, function (err, results) {\n        if (err) {\n            return cb(err);\n        }\n\n        opts.dev = false;\n\n        // remove purgeExcess result\n        results.pop();\n\n        var incorrects = results.filter(function (dep) {\n            return !dep.correct;\n        });\n        var corrects = results.filter(function (dep) {\n            return dep.correct;\n        });\n\n        /*  for each incorrect\n\n             - install it\n             - remove excess\n             - force install all children\n\n\n        */\n        var inCorrectTasks = incorrects.map(function (incorrect) {\n            var name = incorrect.name;\n            var folder = path.join(nodeModules,\n                name, 'node_modules');\n\n            return series.bind(null, [\n                installModule.bind(\n                    null, nodeModules, incorrect, opts),\n                forceInstall.bind(null, folder, incorrect, opts)\n            ]);\n        });\n        var correctTasks = corrects.map(function (correct) {\n            var name = correct.name;\n            var folder = path.join(nodeModules, name,\n                'node_modules');\n\n            return forceInstall.bind(\n                null, folder, correct, opts);\n        });\n\n        /* for each correct\n\n            - force install all children\n        */\n\n        var tasks = [].concat(inCorrectTasks, correctTasks);\n\n        parallel(tasks, cb);\n    });\n}\n\n\nfunction isCorrect(filePath, dep, opts, cb) {\n    var createUri = opts.createUri || defaultCreateUri;\n\n    dep.resolved = dep.resolved ||\n        createUri(dep.name, dep.version);\n\n    var resolvedUri = url.parse(dep.resolved);\n\n    if (resolvedUri.protocol === 'http:' ||\n        resolvedUri.protocol === 'https:'\n    ) {\n        return isCorrectVersion(filePath, dep, cb);\n    } else if (resolvedUri.protocol === 'git:' ||\n        resolvedUri.protocol === 'git+ssh:' ||\n        resolvedUri.protocol === 'git+http:' ||\n        resolvedUri.protocol === 'git+https:'\n    ) {\n        isCorrectSHA(filePath, dep, cb);\n    } else {\n        cb(new Error('unsupported protocol ' +\n            resolvedUri.protocol));\n    }\n}\n\nfunction isCorrectVersion(filePath, dep, cb) {\n    var expectedVersion = dep.version;\n\n    read.package(filePath, function (err, json) {\n        if (err) {\n            if (err && err.code === 'ENOENT') {\n                dep.correct = false;\n                return cb(null, dep);\n            } else if (err && !err.code) {\n                dep.correct = false;\n                return cb(null, dep);\n            }\n\n            return cb(err);\n        }\n\n        var actualVersion = json.version;\n\n        dep.correct = actualVersion === expectedVersion;\n        cb(null, dep);\n    });\n}\n\nfunction isCorrectSHA(filePath, dep, cb) {\n    var expectedSha = getSha(dep.resolved);\n\n    read.package(filePath, function (err, json) {\n        if (err) {\n            if (err && err.code === 'ENOENT') {\n                dep.correct = false;\n                return cb(null, dep);\n            }\n\n            return cb(err);\n        }\n\n        // gaurd against malformed node_modules by forcing\n        // a re-install\n        if (!json._resolved) {\n            dep.correct = false;\n            return cb(null, dep);\n        }\n\n        var actualSha = getSha(json._resolved);\n\n        dep.correct = actualSha === expectedSha;\n\n        cb(null, dep);\n    });\n}\n\nfunction getSha(uri) {\n    var parts = url.parse(uri);\n    return parts.hash && parts.hash.substr(1);\n}\n\nfunction defaultCreateUri(name, version) {\n    return template(NPM_URI, {\n        name: name,\n        version: version\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/sync/purge-excess.js":"var path = require('path');\nvar fs = require('graceful-fs');\nvar parallel = require('run-parallel');\nvar rimraf = require('rimraf');\nvar flatten = require('array-flatten');\n\nmodule.exports = purgeExcess;\n\n/*  given the shrinkwrap & package.json, find all extra folders\n    in top level node_modules directory and remove them\n\n    Basically like `npm prune` except recursive\n*/\nfunction purgeExcess(dir, shrinkwrap, opts, cb) {\n    if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};\n    }\n\n    findExcess(dir, shrinkwrap, opts, null, function (err, excessFiles) {\n        if (err) {\n            // if no node_modules then nothing to purge\n            if (err.code === 'ENOENT') {\n                return cb(null);\n            }\n            return cb(err);\n        }\n\n        var tasks = excessFiles.map(function (file) {\n            var filePath = path.join(dir, file);\n            console.log('removing', filePath);\n            return rimraf.bind(null, filePath);\n        });\n\n        parallel(tasks, cb);\n    });\n}\n\n/* find any excess folders in node_modules that are not in\n    deps.\n*/\nfunction findExcess(dir, shrinkwrap, opts, scope, cb) {  // jshint ignore:line\n    fs.readdir(dir, function (err, files) {\n        if (err) {\n            return cb(err);\n        }\n\n        parallel(files.map(function (file) {\n            return validateExcess.bind(null, dir, file, shrinkwrap, opts,\n              scope);\n        }), function (err, excessFiles) {\n            if (err) {\n                return cb(err);\n            }\n            return cb(null, flatten(excessFiles || []).filter(Boolean));\n        });\n    });\n}\n\n/* find any excess folders in node_modules that are not in\n    deps.\n*/\nfunction validateExcess(dir, file, shrinkwrap, opts, scope, cb) {  // jshint ignore:line\n    file = file.toLowerCase();\n\n    // don't consider node_modules/.bin\n    if (file === '.bin') {\n        return cb();\n    }\n\n    // consider top-level scoped packages only; e.g. those nested at the level\n    // node_modules/{*}\n    var isScopedDir = file[0] === '@';\n    if (isScopedDir) {\n        return findExcess(path.join(dir, scope + '/' + file), shrinkwrap, opts,\n          file, cb);\n    }\n\n    // the file is in excess if it does not exist in the package.json's\n    // dev dependencies; this step is skipped if we are not analyzing\n    // dev dependencies\n    if (opts.dev && shrinkwrap.devDependencies &&\n        lowercaseContains(Object.keys(shrinkwrap.devDependencies), file)) {\n        return cb();\n    }\n\n    // the file is in excess if it does not exist in the package.json's\n    // regular dependencies\n    if (shrinkwrap.dependencies && lowercaseContains(Object.keys(shrinkwrap.dependencies), file)) {\n        return cb();\n    }\n\n    // if all checks pass up until this point, the file is in excess\n    return cb(null, [file]);\n}\n\n/* check if the element (as a string) is contained in the array of strings\n   in a case-insensitive fashion.\n*/\nfunction lowercaseContains(arr, elem) {\n    return arr.map(function (arrElem) {\n        return arrElem.toLowerCase();\n    }).indexOf(elem) !== -1;\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/sync/install-module.js":"var exec = require('child_process').exec;\n\nvar path = require('path');\n\nmodule.exports = installModule;\n\n/* given a location of node_modules it will try and install the\n    named dep into that location.\n\n    Assumes npm.load() was called\n\n*/\nfunction installModule(nodeModules, dep, opts, cb) {\n    var where = path.join(nodeModules, '..');\n\n    console.log('installing ', where, dep.resolved);\n    var cmd = 'npm install ' + dep.resolved;\n\n    if (opts.registry) {\n        cmd += ' --registry=' + opts.registry;\n    }\n\n    exec(cmd, {\n        cwd: where\n    }, cb);\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/bin/cli.js":"#!/usr/bin/env node\n\nvar parseArgs = require('minimist');\nvar path = require('path');\n\nvar installModule = require('./install.js');\nvar printHelp = require('./help.js');\nvar shrinkwrap = require('../index.js');\nvar formatters = require('./formatters.js');\nvar diffShrinkwrap = require('./diff.js');\nvar syncShrinkwrap = require('../sync/');\n\nmain.printWarnings = printWarnings;\n\nmodule.exports = main;\n\nif (require.main === module) {\n    main(parseArgs(process.argv.slice(2)));\n}\n\nfunction main(opts, callback) {\n    var command = opts._.shift();\n\n    if (opts.h || opts.help || command === 'help') {\n        return printHelp(opts);\n    }\n\n    opts.dirname = opts.dirname ?\n        path.resolve(opts.dirname) : process.cwd();\n\n    opts.keepNested = 'keep-nested' in opts ?\n        !!opts['keep-nested'] : 'keepNested' in opts ?\n        !!opts.keepNested : true;\n\n    opts.warnOnNotSemver = opts.warnOnNotSemver ?\n        opts.warnOnNotSemver : true;\n\n    opts.cmd = opts.cmd || 'npm-shrinkwrap';\n\n    if (command === 'install') {\n        return installModule(opts, function (err) {\n            if (err) {\n                throw err;\n            }\n\n            console.log('added %s to package.json', opts.cmd);\n        });\n    } else if (command === 'diff') {\n        return diffShrinkwrap(opts, function (err, diff) {\n            if (callback) {\n                return callback(err, diff);\n            }\n\n            if (err) {\n                throw err;\n            }\n\n            console.log(diff);\n        });\n    } else if (command === 'sync') {\n        return syncShrinkwrap(opts, function (err) {\n            if (callback) {\n                return callback(err);\n            }\n\n            if (err) {\n                console.log('error', err);\n                console.error('stack', new Error().stack);\n                // console.log('stack.length', err.stack.length);\n                // return;\n                throw err;\n            }\n\n            console.log('synced npm-shrinkwrap.json ' +\n                'into node_modules');\n        });\n    }\n\n    shrinkwrap(opts, function (err, warnings) {\n        if (err) {\n            if (opts.onerror) {\n                return opts.onerror(err);\n            }\n\n            if (callback) {\n                return callback(err);\n            }\n\n            printWarnings(err, formatters);\n            console.log('something went wrong. Did not write ' +\n                'npm-shrinkwrap.json');\n            return process.exit(1);\n        }\n\n        if (callback) {\n            return callback(null, warnings);\n        }\n\n        if (warnings) {\n            if (opts.onwarn) {\n                opts.onwarn(warnings);\n            } else {\n                printWarnings({ errors: warnings }, formatters);\n            }\n        }\n\n        if (!opts.silent) {\n            console.log('wrote npm-shrinkwrap.json');\n        }\n    });\n}\n\nfunction printWarnings(err, formatters) {\n    if (!err.errors) {\n        return console.error(err.message);\n    }\n\n    err.errors.forEach(function (err) {\n        var format = formatters[err.type] || formatters.default;\n\n        console.error(format(err));\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/bin/install.js":"var path = require('path');\nvar readJSON = require('../read-json');\nvar fs = require('graceful-fs');\nvar template = require('string-template');\n\nvar version = require('../package.json').version;\n\nvar shrinkwrapCommand = '{cmd}';\n\nmodule.exports = installModule;\n\nfunction installModule(opts, callback) {\n    var file = path.join(opts.dirname, 'package.json');\n\n    opts.packageVersion = opts.packageVersion || '^' + version;\n    opts.moduleName = opts.moduleName || 'npm-shrinkwrap';\n\n    readJSON(file, function (err, package) {\n        if (err) {\n            return callback(err);\n        }\n\n        package.scripts = package.scripts || {};\n\n        package.scripts.shrinkwrap =\n            template(shrinkwrapCommand, opts);\n\n        if (!opts.onlyScripts) {\n            package.devDependencies =\n                package.devDependencies || {};\n            package.devDependencies[opts.moduleName] =\n                opts.packageVersion;\n        }\n\n        fs.writeFile(file, JSON.stringify(package, null, 2) + '\\n',\n            'utf8', callback);\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/bin/help.js":"var path = require('path');\nvar fs = require('graceful-fs');\nvar msee = require('msee');\nvar template = require('string-template');\n\nfunction printHelp(opts) {\n    opts = opts || {};\n\n    var loc = path.join(__dirname, 'usage.md');\n    var content = fs.readFileSync(loc, 'utf8');\n\n    content = template(content, {\n        cmd: opts.cmd || 'npm-shrinkwrap'\n    });\n\n    if (opts.h) {\n        content = content.split('##')[0];\n    }\n\n    var text = msee.parse(content, {\n        paragraphStart: '\\n'\n    });\n\n    return console.log(text);\n}\n\nmodule.exports = printHelp;\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/bin/formatters.js":"module.exports = {\n    'gitlink.tag.notsemver': notSemver,\n    'invalid.git.version': invalidVersion,\n    'default': printError\n};\n\nfunction notSemver(err) {\n    return 'WARN: ' + err.message;\n}\n\nfunction invalidVersion(err) {\n    return 'ERROR: ' + err.message;\n}\n\nfunction printError(err) {\n    return err.message;\n}\n","/home/travis/build/npmtest/node-npmtest-npm-shrinkwrap/node_modules/npm-shrinkwrap/bin/diff.js":"var parallel = require('run-parallel');\nvar path = require('path');\nvar readJSON = require('../read-json');\nvar jsonDiff = require('json-diff');\nvar colorize = require('json-diff/lib/colorize');\nvar exec = require('child_process').exec;\nvar jsonParse = require('safe-json-parse');\n\n/*jshint camelcase: false*/\nfunction purgeDeps(opts, diff, meta) {\n    if (!diff) {\n        return;\n    }\n\n    var depsKey = 'dependencies' in diff ?\n        'dependencies' : 'dependencies__deleted' in diff ?\n        'dependencies__deleted' : 'dependencies__added' in diff ?\n        'dependencies__added' : null;\n    if (!depsKey) {\n        return diff;\n    }\n\n    var deps = diff[depsKey];\n\n    diff[depsKey] = Object.keys(deps).reduce(function (acc, key) {\n        var deleted = meta.deleted ? meta.deleted :\n            (key.indexOf('__deleted') !== -1 ||\n            depsKey === 'dependencies__deleted');\n        var added = meta.added ? meta.added :\n            (key.indexOf('__added') !== -1 ||\n            depsKey === 'dependencies__added');\n        if (deleted || added) {\n            if (meta.depth >= opts.depth) {\n                if (!opts.short) {\n                    deps[key].dependencies = '[NestedObject]';\n                    acc[key] = deps[key];\n                } else {\n                    acc[key] = (deleted ? '[Deleted' : '[Added') +\n                        '@' + deps[key].version + ']';\n                }\n            } else {\n                acc[key] = purgeDeps(opts, deps[key], {\n                    depth: meta.depth + 1,\n                    added: added,\n                    deleted: deleted\n                });\n            }\n        } else {\n            acc[key] = purgeDeps(opts, deps[key], {\n                depth: meta.depth + 1\n            });\n        }\n\n        return acc;\n    }, {});\n\n    return diff;\n}\n\nfunction diffContent(oldContent, newContent, opts) {\n    var diff = jsonDiff.diff(oldContent, newContent);\n\n    diff = purgeDeps(opts, diff, {\n        depth: 0\n    });\n\n    return colorize.colorize(diff, {\n        color: opts.color\n    });\n}\n\nfunction gitShow(sha, cwd, callback) {\n    function ongit(err, stdout, stderr) {\n        if (stderr) {\n            console.error(stderr);\n        }\n\n        if (err && err.message.indexOf('not in \\'HEAD\\'') !== -1) {\n            return callback(null, {});\n        }\n\n        if (err) {\n            return callback(err);\n        }\n\n        jsonParse(stdout, callback);\n    }\n\n    exec('git show ' + sha + ':./npm-shrinkwrap.json', {\n        cwd: cwd || process.cwd(),\n        maxBuffer: 10000 * 1024\n    }, ongit);\n}\n\nfunction isFile(fileName) {\n    var index = fileName.indexOf('.json');\n\n    return index !== -1 && index === fileName.length - 5;\n}\n\nfunction main(opts, callback) {\n    var fileA = opts._[0];\n    var fileB = opts._[1];\n\n    if (!fileB) {\n        fileB = 'npm-shrinkwrap.json';\n    }\n\n    if (!fileA) {\n        fileA = 'HEAD';\n    }\n\n    if (!(\"color\" in opts)) {\n        opts.color = process.stdout.isTTY;\n    } else if (opts.color === \"false\") {\n        opts.color = false;\n    }\n\n    if (!(\"short\" in opts)) {\n        opts.short = true;\n    }\n\n    opts.depth = 'depth' in opts ? opts.depth : 0;\n    var cwd = opts.dirname || process.cwd();\n\n    parallel([\n        isFile(fileA) ?\n            readJSON.bind(null, path.resolve(cwd, fileA)) :\n            gitShow.bind(null, fileA, cwd),\n        isFile(fileB) ?\n            readJSON.bind(null, path.resolve(cwd, fileB)) :\n            gitShow.bind(null, fileB, cwd)\n    ], function (err, files) {\n        if (err) {\n            return callback(err);\n        }\n\n        callback(null, diffContent(files[0], files[1], opts));\n    });\n}\n\nmodule.exports = main;\n"}